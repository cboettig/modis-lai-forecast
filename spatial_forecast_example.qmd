---
title: "spatial_forecast_example"
author: "John, David, Emma, Carl"
format: html
editor: visual
---

```{r}
suppressPackageStartupMessages(source("packages.R"))
for (f in list.files(here::here("R"), full.names = TRUE)) source (f)
```

We will demonstrate the work that we've done using an example of a post burn area.

```{r}
# Bounding box ------------------------------------------------------------

# pull box, mask

fire_box <- fire_bbox(fire = "august_complex", pad_box = TRUE)
```

First, we need to ingest our data. We do this by interfacing with the Microsoft Planetary Computer using the function `ingest_planetary_data()`. We specify a start date, end date, and a bounding box.

```{r}
# Ingest data ------------------------------------------------------------

# use ingest_planetary_data function to extract raster cube for fire bounding box between Jan 1 2002 and July 1 2023.
raster_cube <- ingest_planetary_data(start_date = "2002-01-01", 
 end_date = "2023-07-01", 
 box = fire_box$bbox)
```

Next, we want to generate and store a target file to evaluate our (eventual) forecast. We can do this using the function `create_target_file().`

For forecast pipeline purposes, `create_target_file()` returns the directory that the target file is stored.

```{r}
# create target file
target_forecast_dir <- create_target_file(cuberast = raster_cube,                   date = '2023-06-22',
 dir = 'targets',
 mask = fire_box$maskLayer)
```

Now, we want to create a climatological forecast. The function `spat_climatology()` builds a climatology forecast using historical data for a given month, and stores an ensemble of geotiff files. In the event that there are missing historical data for a given month, missing values are imputed using a simple bootstrap re-sample of previous values within a pixel.

Once again, for pipeline purposes, `spat_climatology` returns the directory that ensemble forecasts were written to.

```{r}
# Forecast ----------------------------------------------------------------

ensemble_forecast_dir <- spat_climatology(cuberast = raster_cube,                   date = '2023-06-22',
 dir = 'climatology') 
```

Finally, we want to score forecasts. We demonstrate this on our ensemble climatology forecast using the function `scoring_spat_ensemble()`. This function takes three arguments: the directory that ensemble forecasts are stored in (`fc_dir`), the directory that the target is stored in (`target_dir`), and the directory to write the scores geotiff file to (`scores_dir`).

```{r}
## generate and write geotiff file for scores
scored_forecast_dir <- scoring_spat_ensemble(fc_dir = ensemble_forecast_dir,
target_dir = target_forecast_dir,         scores_dir = 'scores')
```

Let's take a look at the performance of our climatology model.

```{r}
scores_crps <- rast(paste0(target_forecast_dir, '/crps_scores.tif'))
plot(scores_crps, main = 'CRPS Scores')

scores_logs <- rast(paste0(target_forecast_dir, '/logs_scores.tif'))
plot(scores_crps, main = 'Logarithmic Scores')
```
